{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","Cardlist","map","Searchbox","placeholder","handleevent","type","onClick","App","HandlerChange","e","setState","searchField","target","value","state","monsters","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAIaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACrB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCLlBC,EAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SAEID,EAAMI,QAAQK,KACV,SAAAL,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNjCK,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,YAAf,OACrB,uBACIX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,QAASF,MC+BFG,E,kDAjCb,aAAe,IAAD,8BACZ,gBAaFC,cAAgB,SAACC,GACf,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXC,SAAU,GACVJ,YAAa,IAJH,E,qDAQd,WAAoB,IAAD,OACjBK,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACK,SAAUK,S,oBAO1C,WAAU,IAAD,EAEyBC,KAAKP,MAA9BC,EAFA,EAEAA,SAAUJ,EAFV,EAEUA,YACXW,EAAmBP,EAASQ,QAAO,SAAA3B,GAAO,OAAIA,EAAQE,KAAK0B,cAAcC,SAASd,EAAYa,kBAEpG,OACE,sBAAK/B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWU,YAAY,iBAAiBG,QAASe,KAAKb,gBACtD,cAAC,EAAD,CAAUZ,QAAS0B,W,GA5BTI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a28224c8.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\n\nexport const Card = (props) => {\n    return(\n        <div className='card-container'>\n            <img alt=\"Monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\n             <h2>{props.monster.name}</h2>\n             <p>{props.monster.email}</p>\n        </div>\n    )\n}","import React from 'react';\nimport './card-list.styles.css'\nimport { Card } from '../card/card.component';\n\nexport const Cardlist = (props) => {\n    return(\n        <div className='card-list'>\n        {\n            props.monster.map(\n                monster => <Card key={monster.id} monster={monster}/>\n                )\n        }\n        </div>\n        )\n}","import React from 'react';\nimport './search-box.styles.css';\n\nexport const Searchbox = ({placeholder, handleevent}) => (\n    <input\n        className='search' \n        type='search' \n        placeholder={placeholder} \n        onClick={handleevent}\n      />\n)","import React, {Component} from 'react';\nimport './App.css';\nimport {Cardlist} from './components/card-list/card-list.component.jsx'\nimport {Searchbox} from './components/search-box/search-box.component.jsx'\n\nclass App extends Component{\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  HandlerChange = (e) => {\n    this.setState({searchField: e.target.value})\n  }\n\n  render() {\n    \n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <Searchbox placeholder='Search Monster' onClick={this.HandlerChange}/>\n        <Cardlist monster={filteredMonsters}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}